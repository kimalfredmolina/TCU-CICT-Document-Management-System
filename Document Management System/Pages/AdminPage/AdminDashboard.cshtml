@page
@model Document_Management_System.Pages.AdminPage.AdminDashboardModel
@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "_LayoutDashboard";
}
<style>
    .user-info-card {
        background: linear-gradient(135deg, #4a6cf7 0%, #2541b2 100%);
        border-radius: 10px;
        padding: 20px;
        color: white;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        overflow: hidden;
        position: relative;
    }

        .user-info-card::before {
            content: '';
            position: absolute;
            top: -50px;
            right: -50px;
            width: 150px;
            height: 150px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
        }

    .user-info-header {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .user-avatar {
        width: 50px;
        height: 50px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        font-size: 20px;
    }

    .user-meta h3 {
        margin: 0;
        font-weight: 600;
        font-size: 1.2rem;
    }

    .username {
        font-weight: 700;
    }

    .user-badge {
        display: inline-block;
        background: rgba(255, 255, 255, 0.2);
        padding: 3px 10px;
        border-radius: 20px;
        font-size: 0.8rem;
        margin-top: 5px;
        font-weight: 500;
    }

    .user-info-footer {
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        padding-top: 15px;
    }

    .user-stats {
        display: flex;
        gap: 20px;
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
        opacity: 0.9;
    }

        .stat-item i {
            font-size: 0.8rem;
        }

    .dashboard-container {
        padding: 20px;
    }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .stat-info h3 {
        font-size: 1rem;
        color: #6c757d;
        margin-bottom: 5px;
    }

    .stat-value {
        font-size: 1.8rem;
        font-weight: 700;
        color: #2e59d9;
        margin-bottom: 5px;
    }

    .stat-link {
        font-size: 0.8rem;
        color: #4e73df;
        text-decoration: none;
    }

    .stat-icon {
        font-size: 2.5rem;
        color: #dddfeb;
    }

    .charts-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .chart-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .card-header {
        padding: 15px 20px;
        border-bottom: 1px solid #eee;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .card-body {
        padding: 20px;
    }

    .document-distribution {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .distribution-item {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .distribution-label {
        font-size: 14px;
        color: #555;
    }

    .progress {
        height: 25px;
        background: #f0f0f0;
        border-radius: 4px;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background: #4e73df;
        color: white;
        display: flex;
        align-items: center;
        padding-left: 10px;
        font-size: 12px;
        font-weight: 500;
    }

    .chart-actions {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .priority-tasks {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .task-item {
        transition: background-color 0.3s ease;
        border-radius: 8px;
        margin-bottom: 15px;
        padding: 15px;
        border: 1px solid #eee;
    }

        .task-item[data-status="Completed"] {
            background-color: rgba(40, 167, 69, 0.1);
            border-left: 4px solid #28a745;
        }

        .task-item[data-status="In Progress"] {
            background-color: rgba(255, 193, 7, 0.1);
            border-left: 4px solid #ffc107;
        }

        .task-item[data-status="Overdue"] {
            background-color: rgba(220, 53, 69, 0.1);
            border-left: 4px solid #dc3545;
        }

        .task-item[data-status="Pending"] {
            border-left: 4px solid #6c757d;
        }

    .task-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .task-description {
        margin-bottom: 10px;
    }

    .task-meta {
        display: flex;
        gap: 15px;
        font-size: 0.85rem;
        color: #6c757d;
        margin-bottom: 5px;
    }

    .update-status-btn {
        white-space: nowrap;
    }

    .status-dropdown {
        min-width: 120px;
    }

    .task-number {
        font-weight: 600;
        color: #6c757d;
    }

    .task-content {
        flex: 1;
    }

    .task-title {
        font-weight: 600;
        margin-bottom: 3px;
    }

    .task-meta {
        font-size: 0.8rem;
        color: #6c757d;
    }

    .activity-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .activity-item {
        display: flex;
        gap: 15px;
        padding: 10px 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .activity-time {
        font-weight: 600;
        color: #6c757d;
        min-width: 50px;
    }

    .view-all {
        margin-top: 15px;
    }

    .pie-chart-container {
        width: 100px;
        height: 100px;
        margin: 10px auto;
    }

    .progress-container {
        margin-top: 10px;
    }

    .task-progress-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }
</style>
@Html.AntiForgeryToken()
<div class="dashboard-content">
    <!-- User Info Card -->
    <div class="user-info-card">
        <div class="user-info-header">
            <div class="user-avatar">
                <i class="fas fa-user-shield"></i>
            </div>
            <div class="user-meta">
                <h3>Welcome back, <span class="username">@User.Identity.Name</span></h3>
                <div class="user-badge">@Model.UserRole</div>
            </div>
        </div>
        <div class="user-info-footer">
            <div class="user-stats">
                <div class="stat-item">
                    <i class="fas fa-calendar-alt"></i>
                    <span>@DateTime.Now.ToString("dddd, MMMM dd")</span>
                </div>
                <div class="stat-item">
                    <i class="fas fa-clock"></i>
                    <span>@DateTime.Now.ToString("h:mm tt")</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="stats-cards">
        <div class="stat-card">
            <div class="stat-info">
                <h3>Total Upload File Documents</h3>
                <div class="stat-value">@Model.TotalDocumentsCount</div>
                <a href="#" class="stat-link">View All</a>
            </div>
            <div class="stat-icon">
                <i class="fas fa-file-alt"></i>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-info">
                <h3>Active Users</h3>
                <div class="stat-value">@Model.ActiveUsersCount</div>
                <a asp-page="/AdminPage/AdminUserTable" class="stat-link">Manage</a>
            </div>
            <div class="stat-icon">
                <i class="fas fa-users"></i>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-info">
                <h3>Folder Categories</h3>
                <div class="stat-value">@Model.CategoriesCount</div>
                <a asp-page="/AdminPage/AdminFileFolder" class="stat-link">Manage</a>
            </div>
            <div class="stat-icon">
                <i class="fas fa-tags"></i>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-info">
                <h3>Total Assigned Tasks</h3>
                <div class="stat-value">@Model.TotalAssignedTasksCount</div>
                <a asp-page="/AdminPage/AdminAssignTask" class="stat-link">View All</a>
            </div>
            <div class="stat-icon">
                <i class="fas fa-tasks"></i>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-info">
                <h3>Avg. Completion</h3>
                <div class="pie-chart-container">
                    <canvas id="completionPieChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Charts Section -->
    <div class="charts-section">
        <!-- Areas by Category Chart -->
        </div>

        <!-- Document Type Distribution Chart -->
        <div class="chart-card">
            <div class="card-header">
                <i class="fas fa-chart-pie"></i> Document Type Distribution
            </div>
            <div class="card-body">
                <canvas id="documentTypeChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Bottom Section -->
    <div class="charts-section">
        @if (User.IsInRole("Admin"))
        {
                   <!-- User Assign Folders -->
                <div class="chart-card">
                    <div class="card-header">
                        <i class="fas fa-folder-open"></i> User Assign Folders
                    </div>
                    <div class="card-body">
                        <div class="priority-tasks">
                        @if (Model.FolderAssignmentsCount != null && Model.FolderAssignmentsCount.Any())
                        {
                            var count = 1;
                            foreach (var folder in Model.FolderAssignmentsCount)
                            {
                                            <div class="task-item">
                                                <div class="task-number">@count.</div>
                                                <div class="task-content">
                                                    <div class="task-title">@folder.Key</div>
                                                    <div class="task-meta">
                                                        Assign User in this Folder: @folder.Value
                                                    </div>
                                                </div>
                                            </div>
                                count++;
                            }
                        }
                        else
                        {
                                    <div>No new assignments found.</div>
                        }
                        </div>
                        <div class="view-all">
                            <a asp-page="/AdminPage/AdminAssignFolder" class="btn btn-outline-secondary btn-block">Assign New User</a>
                        </div>
                    </div>
                </div>               
        }
        <div class="chart-card">
            <div class="card-header">
                <i class="fas fa-tasks"></i> My Tasks
            </div>
        <div class="chart-card">
            <div class="card-header">
                <i class="fas fa-tasks"></i> Task Progress
            </div>
            <div class="card-body">
                @if (Model.TaskProgressList != null && Model.TaskProgressList.Any())
                {
                    <div class="task-progress-list">
                        @foreach (var task in Model.TaskProgressList)
                        {
                            <div class="task-item" data-status="@task.Status" data-id="@task.Id">
                                <div class="task-header">
                                    <h5>@task.TaskName</h5>
                                    <span class="badge @(task.Status == "Completed" ? "bg-success" :
                                               task.Status == "In Progress" ? "bg-primary" :
                                               task.Status == "Overdue" ? "bg-danger" : "bg-secondary")">
                                        @task.Status
                                    </span>
                                </div>
                                <div class="task-description mb-2">@task.Description</div>
                                <div class="progress-container mb-2">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>Progress: @task.ProgressText</span>
                                        <span>@task.ProgressPercentage%</span>
                                    </div>
                                    <div class="progress" style="height: 20px;">
                                        <div class="progress-bar @task.ProgressBarColor"
                                             role="progressbar"
                                             style="width: @(task.ProgressPercentage)%;"
                                             aria-valuenow="@task.CurrentProgress"
                                             aria-valuemin="0"
                                             aria-valuemax="@task.TaskAmount">
                                            @task.ProgressPercentage%
                                        </div>
                                    </div>
                                </div>
                                <div class="task-meta">
                                    <span><i class="fas fa-folder"></i> @task.CategoryName</span>
                                    <span><i class="fas fa-calendar-alt"></i> Due: @task.Deadline.ToString("yyyy-MM-dd")</span>
                                </div>
                                <div class="task-meta">
                                    <span><i class="fas fa-user"></i> Assigned by: @task.CreatedBy</span>
                                    <span><i class="fas fa-file"></i> Files: @task.CurrentProgress</span>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-tasks">
                        <i class="fas fa-check-circle"></i>
                        <p>No tasks with progress to display</p>
                    </div>
                }
            </div>
        </div>
            <div class="card-body">
                @if (Model.UserTasks != null && Model.UserTasks.Any())
                {
                    <div class="task-list">
                        @foreach (var task in Model.UserTasks)
                        {
                        <div class="task-item">
                            <div class="task-header">
                                <h5>@task.TaskName</h5>
                                <div class="task-status">
                                    <select class="form-select form-select-sm status-dropdown" data-taskid="@task.Id">
                                        <option value="Pending" selected="@(task.Status == "Pending")">Pending</option>
                                        <option value="In Progress" selected="@(task.Status == "In Progress")">In Progress</option>
                                        <option value="Completed" selected="@(task.Status == "Completed")">Completed</option>
                                        <option value="Overdue" selected="@(task.Status == "Overdue")">Overdue</option>
                                    </select>
                                </div>
                            </div>
                            <div class="task-description">@task.Description</div>
                                <div class="task-meta">
                                    <span><i class="fas fa-folder"></i> @task.CategoryName</span>
                                    <span><i class="fas fa-calendar-alt"></i> Due: @task.Deadline.ToString("yyyy-MM-dd")</span>
                                </div>
                                <div class="task-meta">
                                    <span><i class="fas fa-user"></i> Assigned by: @task.CreatedBy</span>
                                    <span><i class="fas fa-tag"></i> Status: @task.Status</span>
                                </div>
                        </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-tasks">
                        <i class="fas fa-check-circle"></i>
                        <p>No tasks assigned to you</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Completion Pie Chart
            const pieCtx = document.getElementById('completionPieChart').getContext('2d');
            new Chart(pieCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Completed', 'Remaining'],
                    datasets: [{
                        data: [75, 25],
                        backgroundColor: ['#4e73df', '#e6e6e6'],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: false }
                    }
                }
            });

            // Document Type Chart
            const docCtx = document.getElementById('documentTypeChart').getContext('2d');
            new Chart(docCtx, {
                type: 'pie',
                data: {
                    labels: Object.keys(@Json.Serialize(Model.FolderAssignmentsCount)),
                    datasets: [{
                        data: Object.values(@Json.Serialize(Model.FolderAssignmentsCount)),
                        backgroundColor: [
                            '#4e73df',
                            '#1cc88a',
                            '#36b9cc',
                            '#f6c23e',
                            '#e74a3b',
                            '#858796'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right'
                        }
                    }
                }
            });

            // Refresh button functionality
            document.getElementById('refreshBtn')?.addEventListener('click', function() {
                location.reload();
            });
        });

        $(document).ready(function() {
            $('.status-dropdown').change(function() {
                var taskId = $(this).data('taskid');
                var newStatus = $(this).val();

                $.ajax({
                    url: '?handler=UpdateTaskStatus',
                    type: 'POST',
                    data: {
                        taskId: taskId,
                        status: newStatus
                    },
                    headers: {
                        RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        toastr.success('Task status updated successfully');
                    },
                    error: function() {
                        toastr.error('Error updating task status');
                    }
                });
            });
                    $('.update-status-btn').click(function() {
            var btn = $(this);
            var taskId = $(this).data('taskid');
            var dropdown = $('.status-dropdown[data-taskid="' + taskId + '"]');
            var newStatus = dropdown.val();
            var taskItem = $(this).closest('.task-item');

            // Disable button and show loading state
            btn.prop('disabled', true);
            btn.html('<i class="fas fa-spinner fa-spin"></i> Updating...');

            $.ajax({
                url: '?handler=UpdateTaskStatus',
                type: 'POST',
                data: {
                    taskId: taskId,
                    status: newStatus
                },
                headers: {
                    "RequestVerificationToken": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        // Show success message
                        toastr.success('Task status updated successfully');

                        // Update the task item status attribute
                        taskItem.attr('data-status', newStatus);

                        // Update the status text in the task meta
                        taskItem.find('.task-meta span:contains("Status:")').html('<i class="fas fa-tag"></i> Status: ' + newStatus);

                        // Flash effect to indicate success
                        taskItem.css('transition', 'background-color 0.5s');
                        taskItem.css('background-color', 'rgba(40, 167, 69, 0.2)');
                        setTimeout(function() {
                            taskItem.css('background-color', '');
                        }, 1000);
                    } else {
                        toastr.error('Error updating task status');
                    }
                },
                error: function(xhr) {
                    console.error('Error:', xhr.responseText);
                    toastr.error('Error updating task status: ' + (xhr.responseJSON?.message || 'Server error'));
                },
                complete: function() {
                    // Re-enable button and restore text
                    btn.prop('disabled', false);
                    btn.html('<i class="fas fa-save"></i> Update');
                }
            });
        });
        });
        // Configure toastr options
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "3000"
        };
    </script>
}