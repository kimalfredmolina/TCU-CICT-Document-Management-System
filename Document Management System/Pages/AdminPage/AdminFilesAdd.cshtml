@page
@model Document_Management_System.Pages.AdminPage.AdminFilesAddModel
@{
    ViewData["Title"] = "Admin Add Files";
    Layout = "_LayoutDashboard";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
    .preview-container {
        border: 1px dashed #ced4da;
        border-radius: 8px;
        min-height: 300px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        background-color: #f8f9fa;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }
    .preview-container:hover {
        border-color: #adb5bd;
        background-color: #f1f3f5;
    }
    .document-icon i {
        transition: transform 0.3s ease;
    }
    .document-icon:hover i {
        transform: scale(1.1);
    }
    #convertToPdf {
        margin-top: 10px;
    }
    .spinner-border {
        width: 3rem;
        height: 3rem;
    }
    .img-preview {
        max-width: 100%;
        max-height: 500px;
        display: block;
        margin: 0 auto;
    }
    .file-info {
        text-align: center;
        margin-bottom: 1rem;
    }
    .pdf-canvas {
        width: 100%;
        border: 1px solid #dee2e6;
        margin-bottom: 1rem;
    }
</style>

<div class="modal-dialog">
    <div class="modal-content p-4">
        <div class="modal-header">
            <h5 class="modal-title">Add New Document</h5>
        </div>
        <div class="modal-body">
            <form method="post" enctype="multipart/form-data">
                <div class="mb-3">
                    <label for="fileName" class="form-label">File Name</label>
                    <input type="text" class="form-control" id="fileName" name="FileName" value="Item 1">
                </div>

                <div class="mb-3">
                    <label for="categories" class="form-label">Categories</label>
                    <select class="form-select" id="categories" name="Categories">
                        <option selected disabled>Select category</option>
                        <option value="thesis">Thesis</option>
                        <option value="alcu">ALCU</option>
                        <option value="memo">Memo</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="contentType" class="form-label">Content Type</label>
                    <input type="text" class="form-control" id="contentType" name="ContentType" placeholder="Enter content type">
                </div>

                <div class="mb-3">
                    <label for="formFile" class="form-label">Upload Document/PNG/PDF/DOC Files</label>
                    <input class="form-control" type="file" id="formFile" name="FormFile" accept=".pdf,.png,.jpg,.jpeg,.doc,.docx">
                </div>

                <div class="mb-3">
                    <label class="form-label">Preview:</label>
                    <div class="preview-container" id="previewContainer">
                        <div class="text-muted">No file selected for preview</div>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary">Cancel</button>
            <button type="submit" class="btn btn-primary">Add</button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.min.js"></script>
<script>
    // Set PDF.js worker path
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.worker.min.js';

    document.getElementById('formFile').addEventListener('change', async function(e) {
        const file = e.target.files[0];
        const previewContainer = document.getElementById('previewContainer');
        previewContainer.innerHTML = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"></div></div>';

        // Constants for validation
        const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
        const ALLOWED_TYPES = [
            'application/pdf',
            'image/jpeg',
            'image/png',
            'application/msword',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        ];

        if (!file) {
            showNoFileMessage();
            return;
        }

        // Validate file size
        if (file.size > MAX_FILE_SIZE) {
            previewContainer.innerHTML = `
                <div class="alert alert-warning">
                    File too large (max ${MAX_FILE_SIZE/1024/1024}MB allowed)
                </div>
            `;
            return;
        }

        // Validate file type
        if (!ALLOWED_TYPES.includes(file.type) && !isWordDocument(file)) {
            previewContainer.innerHTML = `
                <div class="alert alert-warning">
                    Unsupported file type: ${file.type || 'Unknown'}
                </div>
            `;
            return;
        }

        try {
            // Update form fields
            document.getElementById('fileName').value = file.name.split('.').slice(0, -1).join('.');
            document.getElementById('contentType').value = file.type || 'Unknown';

            // Create file info display
            const fileInfo = document.createElement('div');
            fileInfo.className = 'file-info';
            fileInfo.innerHTML = `
                <strong>${file.name}</strong><br>
                <small class="text-muted">
                    ${(file.size / 1024).toFixed(2)} KB | 
                    ${file.type || 'Unknown type'}
                </small>
            `;
            previewContainer.innerHTML = '';
            previewContainer.appendChild(fileInfo);

            // Handle different file types
            if (file.type === 'application/pdf') {
                await renderPdfPreview(file, previewContainer);
            } else if (file.type.startsWith('image/')) {
                renderImagePreview(file, previewContainer);
            } else if (isWordDocument(file)) {
                renderWordDocumentPreview(file, previewContainer);
            } else {
                renderGenericPreview(file, previewContainer);
            }
        } catch (error) {
            console.error('Preview error:', error);
            previewContainer.innerHTML = `
                <div class="alert alert-danger">
                    Failed to generate preview: ${error.message}
                </div>
            `;
        }
    });

    // PDF rendering function
    async function renderPdfPreview(file, container) {
        try {
            const loadingTask = pdfjsLib.getDocument(URL.createObjectURL(file));
            const pdf = await loadingTask.promise;
            
            // Get first page
            const page = await pdf.getPage(1);
            const viewport = page.getViewport({ scale: 1.0 });
            
            const canvas = document.createElement('canvas');
            canvas.className = 'pdf-canvas';
            const context = canvas.getContext('2d');
            canvas.height = viewport.height;
            canvas.width = viewport.width;
            
            container.appendChild(canvas);
            
            await page.render({
                canvasContext: context,
                viewport: viewport
            }).promise;
            
            // Add page count info
            const pageInfo = document.createElement('div');
            pageInfo.className = 'text-center text-muted mt-2';
            pageInfo.textContent = `PDF (${pdf.numPages} page${pdf.numPages !== 1 ? 's' : ''})`;
            container.appendChild(pageInfo);
        } catch (error) {
            throw new Error('Failed to render PDF preview');
        }
    }

    // Image preview function
    function renderImagePreview(file, container) {
        const img = document.createElement('img');
        img.className = 'img-preview';
        img.src = URL.createObjectURL(file);
        
        img.onload = () => {
            const dimensions = document.createElement('div');
            dimensions.className = 'text-center text-muted mt-2';
            dimensions.textContent = `${img.naturalWidth} × ${img.naturalHeight} pixels`;
            container.appendChild(dimensions);
        };
        
        container.appendChild(img);
    }

    // Word document preview function
    function renderWordDocumentPreview(file, container) {
        const docIcon = document.createElement('div');
        docIcon.className = 'document-icon';
        docIcon.innerHTML = '<i class="fas fa-file-word text-primary"></i>';
        
        const docText = document.createElement('div');
        docText.className = 'text-center';
        docText.innerHTML = `
            <p>Word document detected</p>
			<p>Preview not available for Word documents</p>
            <p>Convert this to pdf to preview</p>
        `;
        
        container.appendChild(docIcon);
        container.appendChild(docText);
        
    }

    // Generic file preview
    function renderGenericPreview(file, container) {
        const icon = document.createElement('div');
        icon.className = 'document-icon';
        
        let fileIcon = 'fa-file';
        if (file.name.endsWith('.csv')) fileIcon = 'fa-file-csv';
        if (file.name.endsWith('.xlsx')) fileIcon = 'fa-file-excel';
        
        icon.innerHTML = `<i class="fas ${fileIcon} text-secondary"></i>`;
        
        const text = document.createElement('div');
        text.className = 'text-center';
        text.textContent = 'Preview not available for this file type';
        
        container.appendChild(icon);
        container.appendChild(text);
    }

    // Helper function to detect Word docs
    function isWordDocument(file) {
        return file.type === 'application/msword' || 
               file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||
               file.name.endsWith('.doc') || 
               file.name.endsWith('.docx');
    }

    function showNoFileMessage() {
        const previewContainer = document.getElementById('previewContainer');
        previewContainer.innerHTML = '<div class="text-muted">No file selected for preview</div>';
    }
</script>